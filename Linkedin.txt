-->Deafio 03: Conceitos em ReactJS
*Challenge Three: Concepts in ReactJS

-->O presente desafio estipulado pelo Diego Fernandes, da Rocketseat, o qual concluí ainda semana retrasada, teve como objetivo construir uma aplicação web em ReactJS com o intuito de consumir os recursos de Back-end criados a partir do desafio anterior, a fim de Criar, Ler, Atualizar e Deletar dados simulados de repositórios em um portifólio.

*The present challenge defined by Diego Fernandes, from Rocketseat, who I concluded still in last week, had how objective buid an web application in ReactJS with the intention of consume the Back-end resources created from previous challenge, in order to create, read, update and delete simulated data of repositories in a portfolio.

Neste novo desafio foi apresentado, primeiramente, os conceitos de React abrangendo os de estilização com CSS, o uso de funções como funções de evento dentro de um JSX para adição e remoção de dados, e o uso de Hooks (Estados de vida), tais como o de Estado (useState) e o de Efeito (useEffect). 

*In this new challenge presented, firtly, the concepts of React including CSS styling, the use od functions how event functions inside in JSX to addition and deletion data, and the use of Hooks (Life States), such as the State (useState) and the Effect (useEffect).

O primeiro Hook considera o uso do conceito de desestruturação, advindo do EcmaScript2016 (ES6), que permite ao usuário definir um nome para a variável de armazenamento e outro nome para a função de estado dessa mesma variável, sendo muitas vezes aplicado o conceito de imutabilidade ao trabalhar-se com Matrizes.

*The first hook considers the use of concept of destructuring, from EcmaScript2016(ES6), that allows the user to define a name to storage variable and other name to state function in this same variable. This concept many times is applied when Arrays are used.

O segundo, por sua vez, é utilizado para renderizar um ou mais vezes o estado de determinada instrução, sendo necessário observar quais são as variáveis que devem ou não estar presentes na Matriz de dependências desse estado.

*The second hook, in turn, is used to render one or more times the state of a given instruction, being necessary to observe which are the variables that must or on't be presents in dependencies of Array in this state.

Por último e não menos importante, foi feito o uso da biblioteca "axios" para consumir os recursos (ou serviços) do back-end anteriormente constrúido. Por meio dela, foi possível definir a rota base da url em sua api web, a fim de viabilizar a comunicação com a API do Back-end, o que tornou possível seu uso dentro do estado de Efeito no componente principal da aplicação, a fim de carregar a lista de repositórios armazenados na API do Back-end. 

Last and not least, the "axios" library was used to consume the resources (or services) of the previously built back-end. Through it, the url base was defined in its web api, which allowed the communication with the API Back-end, being possible to use it within the State of Effect in the main component of the application, in order to load the list of repositories stored in the backend API.

* Last and not least, the library "axios" was used to consume the resources (or services) of back-end previously built. Throught it, the url base in his web api was defined, which allowed the communication with the Back-end of API, that allowed be possible use it inside of Effect State in main component of application, in order load the list of repositories stored in Back-end API.

Veja uma prévia desse conteúdo:

* See a preview in this content: